/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classroom.helper;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.LinkedList;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ianmoore
 */
public class MarkStuAttendance extends javax.swing.JPanel {

    private ClassroomHelper app;
    private ClassS classS;
    private ClassHome homepage;
    private JPanel lastPage;
    private GUIFrame baseFrame;
    private String[][] data;
    private int sel;

    public MarkStuAttendance(ClassroomHelper appl, ClassS cla, ClassHome home, JPanel last, GUIFrame frame) {
        app = appl;
        classS = cla;
        homepage = home;
        lastPage = last;
        baseFrame = frame;
        baseFrame.setContentPane(this);
        initComponents();
        addStuDataToTable();
        CustomCellRenderer cCellRend = new CustomCellRenderer();
        //cCellRend.setHorizontalAlignment(SwingConstants.RIGHT);
        jTable1.setDefaultRenderer(Object.class, cCellRend);
        cCellRend.setHorizontalAlignment(SwingConstants.RIGHT);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(new CustomCellRenderer());
        jTable1.getColumnModel().getColumn(1).setCellRenderer(cCellRend);
        //((DefaultTableCellRenderer) jTable1.getDefaultRenderer(String.class)).
        //jTable1.setDefaultRenderer(String.class, new CustomCellRenderer());
        jTable1.setGridColor(Color.DARK_GRAY);
        //jTable1.getShowHorizontalLines
        jTable1.setShowVerticalLines(false);
        System.out.println("Alignment: " + cCellRend.getHorizontalAlignment());
        jTable1.setIntercellSpacing(new Dimension(0, 1));
        saveValsB.setEnabled(false);
        //jTable1.getColumnModel().getColumn(1).setCellRenderer
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        saveValsB = new javax.swing.JButton();
        lastPageB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(36);
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTable1.setShowGrid(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        saveValsB.setText("Save");
        saveValsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveValsBActionPerformed(evt);
            }
        });

        lastPageB.setText("Back");
        lastPageB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastPageBActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 25)); // NOI18N
        jLabel1.setText("Mark Student Attendance");

        jLabel2.setText("Click a student's name to change their attendance status for this class period:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lastPageB)
                    .addComponent(saveValsB))
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 110, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lastPageB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(saveValsB)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        if(!saveValsB.isEnabled()) {
            saveValsB.setEnabled(true);
        }
        if(jTable1.getValueAt(jTable1.getSelectedRow(), 1).equals("")) {
            jTable1.setValueAt("absent", jTable1.getSelectedRow(), 1);
        } else {
            jTable1.setValueAt("", jTable1.getSelectedRow(), 1);
        }
    }//GEN-LAST:event_jTable1MousePressed

    private void saveValsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveValsBActionPerformed
        LinkedList<Student> stus = app.getCurSxn().getStus();
        for(int i = 0; i < stus.size(); i++) {
            for(int j = 0; j < data.length; j++) {
                if(stus.get(i).getFuName().equals(data[j][0])) {
                    if(jTable1.getValueAt(j, 1).equals("absent")) {
                        stus.get(i).setIsPres(false);
                    } else {
                         stus.get(i).setIsPres(true);
                    }
                }
            }
        }
        classS.updatePresStus();
        app.getCurSxn().updateStuData();
        baseFrame.setContentPane(lastPage);
    }//GEN-LAST:event_saveValsBActionPerformed

    private void lastPageBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastPageBActionPerformed
        baseFrame.setContentPane(lastPage);
    }//GEN-LAST:event_lastPageBActionPerformed

    public void addStuDataToTable() {
        //need to prevent SL stus from being shown during HL classes
        LinkedList<Student> stus = app.getCurSxn().getStus();
        int dataL = 0;
        if(classS.getLvl().equals("HL")) {
            for(int i = 0; i < stus.size(); i++) {
                if(stus.get(i).getIsHL()) {
                    dataL++;
                }
            }
        } else {
            dataL = stus.size();
        }
        data = new String[dataL][2];
        
        for(int i = 0, sameLvl = 0; sameLvl < data.length; i++) {
            
            if(classS.getLvl().equals("HL")) {
                if(!stus.get(i).getIsHL()) {
                    continue;
                }
            }

            
            data[sameLvl][0] = stus.get(i).getFuName();
            if(stus.get(i).getIsPres()) {
                data[sameLvl][1] = "";
            } else {
                data[sameLvl][1] = "absent";
            }
            
            ((DefaultTableModel) jTable1.getModel()).addRow(data[sameLvl]);
            
            /*if(!stus.get(i).getIsPres()) {
                jTable1.setDefaultRenderer(columnClass, renderer);
            }*/
            sameLvl++;
        }
    }
    
    public class CustomCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            
            
            
            if(jTable1.getModel().getValueAt(row, 1).equals("")) {
                setBackground(Color.white);   
                jTable1.setSelectionBackground(Color.white);
            } else {
                setBackground(Color.lightGray);
                jTable1.setSelectionBackground(Color.lightGray);
            }
            
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            if(column == 1) {
                this.setHorizontalTextPosition(RIGHT);
                c.setForeground(Color.GRAY);
            } else {
                this.setHorizontalTextPosition(LEFT);
                c.setForeground(Color.black);
            }
            
            setBorder(BorderFactory.createEmptyBorder(0, 8, 0, 8));
            //setBorder(noFocusBorder);
            
            return this;
        }
        
         
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton lastPageB;
    private javax.swing.JButton saveValsB;
    // End of variables declaration//GEN-END:variables
}
